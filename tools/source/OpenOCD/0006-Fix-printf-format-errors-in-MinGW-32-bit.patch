From 184fb823c80573c2e892a86136d44863a30020ad Mon Sep 17 00:00:00 2001
From: Evan Hunter <ehunter@broadcom.com>
Date: Sun, 18 Mar 2012 20:03:06 +1100
Subject: [PATCH 05/18] Fix printf format errors in MinGW 32-bit

Change-Id: I0e86bd333c21a318af109f876917ea65ee550d1c
Signed-off-by: Evan Hunter <ehunter@broadcom.com>
---
 src/helper/ioutil.c     |    2 +-
 src/helper/log.h        |   24 ++++++++++++++++++++++++
 src/jtag/core.c         |   12 +++++++-----
 src/rtos/FreeRTOS.c     |    4 ++--
 src/rtos/linux.c        |   10 +++++-----
 src/target/image.c      |    2 +-
 src/target/oocd_trace.c |    4 ++--
 src/target/target.c     |    2 +-
 8 files changed, 43 insertions(+), 17 deletions(-)

diff --git a/src/helper/ioutil.c b/src/helper/ioutil.c
index ba7e215..e283f68 100644
--- a/src/helper/ioutil.c
+++ b/src/helper/ioutil.c
@@ -220,7 +220,7 @@ COMMAND_HANDLER(handle_cp_command)
 		if (retval != ERROR_OK)
 			break;
 
-		command_print(CMD_CTX, "%zu", len - pos);
+		command_print(CMD_CTX, "%" PRIzu, len - pos);
 
 		pos += chunk;
 
diff --git a/src/helper/log.h b/src/helper/log.h
index e1801e9..c3fb9b3 100644
--- a/src/helper/log.h
+++ b/src/helper/log.h
@@ -34,10 +34,34 @@
  */
 #if (defined(IS_MINGW) && (((__GNUC__ << 16) + __GNUC_MINOR__) >= 0x00040004))
 #define PRINTF_ATTRIBUTE_FORMAT gnu_printf
+#define PRIzi "zi"
+#define PRIzu "zu"
+#define PRIzx "zx"
+#define PRIzd "zd"
+#define LOG_PRIx64 "llx"
+#define LOG_PRId64 "lld"
+#define LOG_PRIu64 "llu"
+#elif defined(IS_MINGW)
+#define PRINTF_ATTRIBUTE_FORMAT printf
+#define PRIzi "Ii"
+#define PRIzu "Iu"
+#define PRIzx "Ix"
+#define PRIzd "Id"
+#define LOG_PRIx64 PRIx64
+#define LOG_PRId64 PRId64
+#define LOG_PRIu64 PRIu64
 #else
 #define PRINTF_ATTRIBUTE_FORMAT printf
+#define PRIzi "zi"
+#define PRIzu "zu"
+#define PRIzx "zx"
+#define PRIzd "zd"
+#define LOG_PRIx64 PRIx64
+#define LOG_PRId64 PRId64
+#define LOG_PRIu64 PRIu64
 #endif
 
+
 /* logging priorities
  * LOG_LVL_SILENT - turn off all output. In lieu of try + catch this can be used as a
  *                  feeble ersatz.
diff --git a/src/jtag/core.c b/src/jtag/core.c
index b61280c..93d65ac 100644
--- a/src/jtag/core.c
+++ b/src/jtag/core.c
@@ -1253,16 +1253,18 @@ static int jtag_validate_ircapture(void)
 		 */
 		val = buf_get_u64(ir_test, chain_pos, tap->ir_length);
 		if ((val & tap->ir_capture_mask) != tap->ir_capture_value) {
-			LOG_ERROR("%s: IR capture error; saw 0x%0*" PRIx64 " not 0x%0*" PRIx32,
+			LOG_ERROR("%s: IR capture error; saw 0x%0*" LOG_PRIx64 " not 0x%0*" PRIx32,
 				jtag_tap_name(tap),
-				(tap->ir_length + 7) / tap->ir_length, val,
-				(tap->ir_length + 7) / tap->ir_length, tap->ir_capture_value);
+				(tap->ir_length + 7) / tap->ir_length,
+				(uint64_t) val,
+				(tap->ir_length + 7) / tap->ir_length,
+				(unsigned) tap->ir_capture_value);
 
 			retval = ERROR_JTAG_INIT_FAILED;
 			goto done;
 		}
-		LOG_DEBUG("%s: IR capture 0x%0*" PRIx64, jtag_tap_name(tap),
-			(tap->ir_length + 7) / tap->ir_length, val);
+		LOG_DEBUG("%s: IR capture 0x%0*" LOG_PRIx64, jtag_tap_name(tap),
+			(tap->ir_length + 7) / tap->ir_length, (uint64_t) val);
 		chain_pos += tap->ir_length;
 	}
 
diff --git a/src/rtos/FreeRTOS.c b/src/rtos/FreeRTOS.c
index 04cbdfc..4696526 100644
--- a/src/rtos/FreeRTOS.c
+++ b/src/rtos/FreeRTOS.c
@@ -234,7 +234,7 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 	if (retval != ERROR_OK)
 		return retval;
 	if (max_used_priority > FREERTOS_MAX_PRIORITIES) {
-		LOG_ERROR("FreeRTOS maximum used priority is unreasonably big, not proceeding: %" PRId64 "",
+		LOG_ERROR("FreeRTOS maximum used priority is unreasonably big, not proceeding: %" LOG_PRId64 "",
 			max_used_priority);
 		return ERROR_FAIL;
 	}
@@ -243,7 +243,7 @@ static int FreeRTOS_update_threads(struct rtos *rtos)
 		(symbol_address_t *)malloc(sizeof(symbol_address_t) *
 			(max_used_priority+1 + 5));
 	if (!list_of_lists) {
-		LOG_ERROR("Error allocating memory for %" PRId64 " priorities", max_used_priority);
+		LOG_ERROR("Error allocating memory for %" LOG_PRId64 " priorities", max_used_priority);
 		return ERROR_FAIL;
 	}
 
diff --git a/src/rtos/linux.c b/src/rtos/linux.c
index 80d84d7..cee1b05 100644
--- a/src/rtos/linux.c
+++ b/src/rtos/linux.c
@@ -27,8 +27,8 @@
 #include <jtag/jtag.h>
 #include "target/target.h"
 #include "target/target_type.h"
-#include "helper/log.h"
 #include "helper/types.h"
+#include "helper/log.h"
 #include "rtos.h"
 #include "rtos_standard_stackings.h"
 #include <target/register.h>
@@ -217,7 +217,7 @@ static int linux_os_thread_reg_list(struct rtos *rtos,
 		if (found == 0) {
 			LOG_ERROR
 			(
-				"current thread %" PRIx64 ": no target to perform access of core id %x",
+				"current thread %" LOG_PRIx64 ": no target to perform access of core id %x",
 				thread_id,
 				next->core_id);
 			return ERROR_FAIL;
@@ -699,7 +699,7 @@ struct current_thread *add_current_thread(struct current_thread *currents,
 struct threads *liste_del_task(struct threads *task_list, struct threads **t,
 	struct threads *prev)
 {
-	LOG_INFO("del task %" PRId64, (*t)->threadid);
+	LOG_INFO("del task %" LOG_PRId64, (*t)->threadid);
 	prev->next = (*t)->next;
 
 	if (prev == task_list)
@@ -839,7 +839,7 @@ int linux_get_tasks(struct target *target, int context)
 	linux_os->preupdtate_threadid_count = linux_os->threadid_count - 1;
 	/*  check that all current threads have been identified  */
 
-	LOG_INFO("complete time %" PRId64 ", thread mean %" PRId64 "\n",
+	LOG_INFO("complete time %" LOG_PRId64 ", thread mean %" LOG_PRId64 "\n",
 		(timeval_ms() - start),
 		(timeval_ms() - start) / linux_os->threadid_count);
 
@@ -1109,7 +1109,7 @@ static int linux_task_update(struct target *target, int context)
 			t->base_addr = next_task(target, t);
 	}
 
-	LOG_INFO("update thread done %" PRId64 ", mean%" PRId64 "\n",
+	LOG_INFO("update thread done %" LOG_PRId64 ", mean%" LOG_PRId64 "\n",
 		(timeval_ms() - start), (timeval_ms() - start) / loop);
 	free(t);
 	linux_os->threads_needs_update = 0;
diff --git a/src/target/image.c b/src/target/image.c
index f47ba22..a55f1d5 100644
--- a/src/target/image.c
+++ b/src/target/image.c
@@ -480,7 +480,7 @@ static int image_elf_read_section(struct image *image,
 	if (offset < field32(elf, segment->p_filesz)) {
 		/* maximal size present in file for the current segment */
 		read_size = MIN(size, field32(elf, segment->p_filesz) - offset);
-		LOG_DEBUG("read elf: size = 0x%zu at 0x%" PRIx32 "", read_size,
+		LOG_DEBUG("read elf: size = 0x%" PRIzu " at 0x%" PRIx32 "", read_size,
 			field32(elf, segment->p_offset) + offset);
 		/* read initialized area of the segment */
 		retval = fileio_seek(&elf->fileio, field32(elf, segment->p_offset) + offset);
diff --git a/src/target/oocd_trace.c b/src/target/oocd_trace.c
index e723efe..34784fb 100644
--- a/src/target/oocd_trace.c
+++ b/src/target/oocd_trace.c
@@ -91,7 +91,7 @@ static int oocd_trace_read_memory(struct oocd_trace *oocd_trace, uint8_t *data,
 		bytes_read = read(oocd_trace->tty_fd,
 				((uint8_t *)data) + (size * 16) - bytes_to_read, bytes_to_read);
 		if (bytes_read < 0)
-			LOG_DEBUG("read() returned %zi (%s)", bytes_read, strerror(errno));
+			LOG_DEBUG("read() returned %" PRIzi " (%s)", bytes_read, strerror(errno));
 		else
 			bytes_to_read -= bytes_read;
 	}
@@ -140,7 +140,7 @@ static int oocd_trace_init(struct etm_context *etm_ctx)
 	do {
 		bytes_read = read(oocd_trace->tty_fd, trash, sizeof(trash));
 		if (bytes_read)
-			LOG_DEBUG("%zi bytes read", bytes_read);
+			LOG_DEBUG("%" PRIzi " bytes read", bytes_read);
 	} while (bytes_read > 0);
 
 	return ERROR_OK;
diff --git a/src/target/target.c b/src/target/target.c
index 03a2455..f783844 100644
--- a/src/target/target.c
+++ b/src/target/target.c
@@ -3404,7 +3404,7 @@ static void writeData(FILE *f, const void *data, size_t len)
 {
 	size_t written = fwrite(data, 1, len, f);
 	if (written != len)
-		LOG_ERROR("failed to write %zu bytes: %s", len, strerror(errno));
+		LOG_ERROR("failed to write %" PRIzu " bytes: %s", len, strerror(errno));
 }
 
 static void writeLong(FILE *f, int l)
-- 
1.7.10.4

